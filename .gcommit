# Run the wrapper script 'gcommit', which selects the appropriate interpreter for the .gcommit script.
DRY_RUN=false 

usage() { 
    echo "Usage: gcommit [-h] [-t] commit-message [initials...]" 1>&2; 
    echo "  -h displays this help." 1>&2; 
    echo "  -t displays the commit command without executing it." 1>&2; 
    echo " "
    echo "  You will be prompted for a commit type, with values" 1>&2; 
    echo "  based on the Conventional Commit standard." 1>&2; 
    echo " "
    echo "  You will be asked if this is a breaking change." 1>&2;
    echo "  If so, you will be prompted for a description of the" 1>&2; 
    echo "  breaking change." 1>&2;  
    echo " "
    echo "  You will be prompted to select one or more authors" 1>&2; 
    echo "  from the .team_members file." 1>&2;
    echo " "  
    echo "  The format of each line in the .team_members file is:" 1>&2; 
    echo "  initials=name <email>" 1>&2; 
    echo "  e.g. fl=First Last <first.last@nowhere.man>" 1>&2; 
    echo " " 
    echo "  Initials can be any value but can't contain spaces or" 1>&2;
    echo "  equals signs. The name can contain spaces." 1>&2;
    echo "  The resulting commit message will resemble the following:" 1>&2;
    echo " "
    echo "  feature: Add new feature" 
    echo " "
    echo "  Author: First Last <first.last@blah.com>"
    echo "  Author: First Last <first.last@blah.com>"
    echo " "
    echo "  BREAKING CHANGE: Description of the breaking change" 1>&2;
    exit 0;
}

while getopts "ht" o; do
    case "${o}" in
        h)
            usage
            ;;
        t)
            DRY_RUN=true ;
            echo "Running in dry-run mode. No commit will be made." ;
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

select COMMIT_TYPE in feature fix refactor docs style test chore; do
    case $COMMIT_TYPE in
        feature|fix|refactor|docs|style|test|chore)
            break
            ;;
        *)
            echo "Invalid commit type. Please select a valid type." 1>&2
            ;;
    esac
done 

BREAKING_CHANGE=""
read -p "Is this a breaking change? " -n 1 -r
echo    
if [[ $REPLY =~ ^[Yy]$ ]]; then
    read -p "Breaking change description: " BREAKING_CHANGE_DESC
    BREAKING_CHANGE="BREAKING CHANGE: $BREAKING_CHANGE_DESC"    
fi


# Prompt for commit message lines 
#declare -A COMMIT_LINES 
COMMIT_LINES=()
while [ true ]; do   
  read -p "Commit message: " COMMIT_LINE 
  [[ $COMMIT_LINE == "" ]] && break 
  COMMIT_LINES+=("$COMMIT_LINE")
done 

# Prompt for selection of authors
fileName=".team_members" 
declare -A AUTHORS 
readarray -t lines < "$fileName"
for line in "${lines[@]}"; do
   if [ -n ${line%%=*} ]; then # Skip empty lines 
       if [[ ${line%%=*} == \#* ]]; then
           continue  # Skip comments
       else
         AUTHORS[${line%%=*}]=${line#*=}
       fi
   fi
done

declare -a choices
select choice in "${AUTHORS[@]}" Done
do
  [[ "$choice" == Done ]] && break
  choices+=("Author: $choice")
  echo "Author: $choice selected."
done

# Run the git commit
if [ "$DRY_RUN" = true ]; then
    printf "Dry run: \n" 
    printf "git commit -m $COMMIT_TYPE: $COMMIT_LINES[0]" 

    for line in "${COMMIT_LINES[@]:1}"; do
        printf "$line \ \n"
    done
    for line in "${choices[@]}"; do
        printf "\ \n-m $line"
    done  
    printf "\ \n"
    printf "\ \n$BREAKING_CHANGE"
else
    COMMAND_TEXT="git commit -m \"$COMMIT_TYPE: $COMMIT_LINES\""
    for line in "${COMMIT_LINES[@]:1}"; do 
        COMMAND_TEXT+=" -m \"$line\""
    done
    for line in "${choices[@]}"; do
        COMMAND_TEXT+=" -m \"$line\""
    done  

     exec ${COMMAND_TEXT}



fi

